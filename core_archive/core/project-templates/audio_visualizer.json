{
  "promptTemplate": "An audio visualizer with bass {{bass}}, mid {{mid}}, treble {{treble}}, tempo {{tempo}}, style {{style}}.",
  "variables": [
    { "name": "Bass", "feature_name": "bass", "values": ["0.2", "0.5", "0.8"] },
    { "name": "Mid", "feature_name": "mid", "values": ["0.2", "0.5", "0.8"] },
    { "name": "Treble", "feature_name": "treble", "values": ["0.2", "0.5", "0.8"] },
    { "name": "Tempo", "feature_name": "tempo", "values": ["0.5", "1", "2", "3"] },
    { "name": "Style", "feature_name": "style", "values": ["bars", "circles", "lines"] }
  ],
  "p5_input": {
    "code": "// SYNTHOGRASIZER P5.JS EXAMPLE: Audio Visualizer\n// \n// This example simulates an audio visualizer controlled by Synthograsizer variables.\n// It demonstrates:\n// - Creating a more complex visual effect\n// - Using multiple interacting variables\n// - Simulating an audio responsive visualization\n//\n// REQUIRED VARIABLES:\n// - \"bass\" for controlling low frequency response\n// - \"mid\" for controlling mid frequency response\n// - \"treble\" for controlling high frequency response\n// - \"tempo\" for controlling animation speed\n// - \"style\" with values like \"bars\", \"circles\", \"lines\"\n\n// Animation variables\nlet time = 0;\nlet bars = [];\nconst NUM_BARS = 64;\n\np.setup = function() {\n  p.createCanvas(400, 300).parent(p5Output);\n  p.colorMode(p.HSB, 360, 100, 100, 1);\n  \n  // Initialize bars\n  for (let i = 0; i < NUM_BARS; i++) {\n    bars[i] = 0;\n  }\n};\n\np.draw = function() {\n  p.background(0);\n  \n  // Get Synthograsizer variables\n  const bassVar = p.getSynthVar('bass') || 0.5;\n  const midVar = p.getSynthVar('mid') || 0.5;\n  const trebleVar = p.getSynthVar('treble') || 0.5;\n  const tempoVar = p.getSynthVar('tempo') || 1;\n  const styleVar = p.getSynthVar('style') || 'bars';\n  \n  // Normalize values based on mode\n  const bass = typeof bassVar === 'number' ? p.map(bassVar, -1, 2, 0, 1) : parseFloat(bassVar) || 0.5;\n  const mid = typeof midVar === 'number' ? p.map(midVar, -1, 2, 0, 1) : parseFloat(midVar) || 0.5;\n  const treble = typeof trebleVar === 'number' ? p.map(trebleVar, -1, 2, 0, 1) : parseFloat(trebleVar) || 0.5;\n  const tempo = typeof tempoVar === 'number' ? p.map(tempoVar, -1, 2, 0.25, 4) : parseFloat(tempoVar) || 1;\n  \n  // Update time\n  time += 0.02 * tempo;\n  \n  // Update bar heights using bass/mid/treble values\n  for (let i = 0; i < NUM_BARS; i++) {\n    // Create the illusion of frequency bands\n    const freq = i / NUM_BARS;\n    let freqMult;\n    \n    // Apply frequency band multipliers (bass/mid/treble)\n    if (freq < 0.33) {\n      // Low frequencies (bass)\n      freqMult = bass * 2.5;\n    } else if (freq < 0.66) {\n      // Mid frequencies\n      freqMult = mid * 2.0;\n    } else {\n      // High frequencies (treble)\n      freqMult = treble * 1.5;\n    }\n    \n    // Generate a value using noise for a natural look\n    const noiseVal = p.noise(i * 0.05, time * 0.2) * freqMult;\n    \n    // Add a beat emphasis based on time\n    const beat = Math.pow(Math.sin(time * 0.8) * 0.5 + 0.5, 3) * bass;\n    \n    // Smooth transitions with easing\n    bars[i] = p.lerp(bars[i], noiseVal + beat, 0.2);\n  }\n  \n  // Render based on selected style\n  if (styleVar.toLowerCase().includes('circle')) {\n    drawCircleVisualizer();\n  } else if (styleVar.toLowerCase().includes('line')) {\n    drawLineVisualizer();\n  } else {\n    // Default to bars\n    drawBarVisualizer();\n  }\n  \n  // Display info\n  p.colorMode(p.RGB);\n  p.fill(255);\n  p.noStroke();\n  p.textSize(12);\n  p.textAlign(p.LEFT, p.TOP);\n  p.text(`Mode: ${p.getSynthMode()}`, 10, 10);\n  p.text(`Style: ${styleVar}`, 10, 30);\n  p.text(`Bass: ${bass.toFixed(2)}`, 10, 50);\n  p.text(`Mid: ${mid.toFixed(2)}`, 10, 70);\n  p.text(`Treble: ${treble.toFixed(2)}`, 10, 90);\n  p.text(`Tempo: ${tempo.toFixed(2)}x`, 10, 110);\n  \n  // Function to draw bar visualizer\n  function drawBarVisualizer() {\n    p.colorMode(p.HSB, 360, 100, 100, 1);\n    p.noStroke();\n    \n    // Draw bars\n    for (let i = 0; i < NUM_BARS; i++) {\n      const h = p.map(bars[i], 0, 1, 0, p.height);\n      p.fill(p.map(i, 0, NUM_BARS, 0, 360), 100, 100);\n      p.rect(i * (p.width / NUM_BARS), p.height - h, (p.width / NUM_BARS), h);\n    }\n  }\n  \n  // Function to draw circle visualizer\n  function drawCircleVisualizer() {\n    p.colorMode(p.HSB, 360, 100, 100, 1);\n    p.noStroke();\n    \n    // Draw circles\n    for (let i = 0; i < NUM_BARS; i++) {\n      const r = p.map(bars[i], 0, 1, 0, p.width / 2);\n      p.fill(p.map(i, 0, NUM_BARS, 0, 360), 100, 100);\n      p.ellipse(p.width / 2, p.height / 2, r * 2);\n    }\n  }\n  \n  // Function to draw line visualizer\n  function drawLineVisualizer() {\n    p.colorMode(p.HSB, 360, 100, 100, 1);\n    p.strokeWeight(2);\n    \n    // Draw lines\n    for (let i = 0; i < NUM_BARS; i++) {\n      const h = p.map(bars[i], 0, 1, 0, p.height);\n      p.stroke(p.map(i, 0, NUM_BARS, 0, 360), 100, 100);\n      p.line(i * (p.width / NUM_BARS), p.height - h, i * (p.width / NUM_BARS), p.height);\n    }\n  }\n}\n"
  }
}
