{
  "promptTemplate": "A {{color}} {{shape}} with size {{size}} and rotation {{rotation}}",
  "variables": [
    {
      "name": "Shape",
      "feature_name": "shape",
      "values": [
        "circle",
        "square",
        "triangle"
      ]
    },
    {
      "name": "Size",
      "feature_name": "size",
      "values": [
        "50",
        "75",
        "100",
        "125"
      ]
    },
    {
      "name": "Color",
      "feature_name": "color",
      "values": [
        "white",
        "red",
        "blue",
        "green",
        "yellow"
      ]
    },
    {
      "name": "Rotation",
      "feature_name": "rotation",
      "values": [
        "0.5",
        "1",
        "2",
        "3"
      ]
    }
  ],
  "p5_input": {
    "code": "// SYNTHOGRASIZER P5.JS EXAMPLE: Basic Shapes\n// \n// This example shows how to control basic properties of shapes\n// using Synthograsizer variables. It demonstrates:\n// - Reading both discrete (Mode A) and continuous (Mode B) values\n// - Using type checking to handle different modes\n// - Animating based on variable values\n//\n// REQUIRED VARIABLES:\n// - \"shape\" with values like \"circle\", \"square\", \"triangle\"\n// - \"size\" for controlling shape size\n// - \"color\" with color name values\n// - \"rotation\" for controlling rotation speed\n\nlet angle = 0;\n\np.setup = function() {\n  p.createCanvas(400, 300).parent(p5Output);\n  p.angleMode(p.DEGREES);\n  p.textAlign(p.CENTER, p.CENTER);\n  p.textSize(16);\n  p.strokeWeight(2);\n};\n\np.draw = function() {\n  p.background(20);\n  \n  // Get variables from Synthograsizer (use exact template names as defined in Mode C)\n  const shapeType = p.getSynthVar('shape') || 'circle';  // Default if undefined\n  let shapeSize = p.getSynthVar('size');\n  let rotSpeed = p.getSynthVar('rotation');\n  let colorValue = p.getSynthVar('color') || 'white';\n  \n  // Display current mode in corner\n  p.textSize(12);\n  p.fill(200);\n  p.noStroke();\n  p.text(`Current Mode: ${p.getSynthMode()}`, 70, 20);\n  \n  // Handle size based on type (Mode A = string, Mode B = number)\n  let size;\n  if (typeof shapeSize === 'number') {\n    // Mode B: Map the -1 to 2 range to a reasonable size\n    size = p.map(shapeSize, -1, 2, 20, 150);\n  } else if (typeof shapeSize === 'string') {\n    // Mode A: Try to parse as a number or use a default\n    size = parseInt(shapeSize) || 75;\n  } else {\n    // Default if not defined\n    size = 75;\n  }\n  \n  // Handle rotation based on type\n  let rotationSpeed;\n  if (typeof rotSpeed === 'number') {\n    // Mode B: Map the -1 to 2 range to a rotation speed\n    rotationSpeed = p.map(rotSpeed, -1, 2, -5, 5);\n  } else if (typeof rotSpeed === 'string') {\n    // Mode A: Try to parse or use a default\n    rotationSpeed = parseFloat(rotSpeed) || 1;\n  } else {\n    // Default if not defined\n    rotationSpeed = 1;\n  }\n  \n  // Update rotation angle\n  angle += rotationSpeed;\n  \n  // Draw shape at center of canvas\n  p.push();\n  p.translate(p.width/2, p.height/2);\n  p.rotate(angle);\n  \n  // Apply color (works with standard web color names)\n  p.fill(colorValue);\n  p.stroke(255);\n  \n  // Draw the selected shape\n  if (shapeType.toLowerCase().includes('circle')) {\n    p.ellipse(0, 0, size, size);\n  } else if (shapeType.toLowerCase().includes('square')) {\n    p.rectMode(p.CENTER);\n    p.rect(0, 0, size, size);\n  } else if (shapeType.toLowerCase().includes('triangle')) {\n    const halfSize = size / 2;\n    p.triangle(0, -halfSize, -halfSize, halfSize, halfSize, halfSize);\n  } else {\n    // Default or unknown shape\n    p.ellipse(0, 0, size, size);\n  }\n  \n  p.pop();\n  \n  // Instructions\n  p.textSize(14);\n  p.fill(255);\n  p.noStroke();\n  p.text(\"Use knobs to control shape, size, color & rotation\", p.width/2, p.height - 20);\n};"
  }
}